Assignment 2:


import mpi.*;

public class MPI_Deg_to_Rad
{
	
	public static void main(String[] args)throws Exception
	{
	
		MPI.Init(args);
		
		int rank = MPI.COMM_WORLD.Rank();
		int size = MPI.COMM_WORLD.Size();
		
		if(rank == 0 )
		{
			int degrees[] = {30,40,50,60};
			double radians[] = new double[1];
			
			for (int i=1;i<size;i++)
				MPI.COMM_WORLD.Send(degrees,0,4,MPI.INT,i,1);
				
			System.out.println("Degrees Radians");
			for (int i=1;i<size;i++)
			{
				MPI.COMM_WORLD.Recv(radians,0,1,MPI.DOUBLE,i,2);
				System.out.println(degrees[i-1]+"       "+radians[0]);
			}	
				
		}
		else
		{
			int degrees[]=new int[4];
			MPI.COMM_WORLD.Recv(degrees,0,4,MPI.INT,0,1);
			
			double rad[] = new double[1];
			rad[0]  = Math.toRadians(degrees[rank-1]);
			
			MPI.COMM_WORLD.Send(rad,0,1,MPI.DOUBLE,0,2);
		}

		MPI.Finalize();
	}
}

Assignment 4 :

Bully 
import java.io.InputStream;
import java.io.PrintStream;
import java.util.Scanner;

public class Bully 
{
	static int num_proc = 6;
	static boolean[] state = new boolean[num_proc];
    static int coordinator =0;

    public static void elect(int startid)
    {
    	int tmpcoord = startid;
    	int i=startid;
    	int j=i+1;
    	for ( i=startid; i<num_proc ; i++) 
        {
    		for ( j = i+1; j<num_proc ; j++) 
            {
    			if(state[i]==true) 
                {
    				System.out.println("\nMessage sent from "+i+" to "+j);
    			}
			}
			for ( j = i+1; j<num_proc ; j++) 
            {
				if(state[j]==true && state[i] == true)
                {
					System.out.println("\nOK sent from "+j+" to "+i);
					tmpcoord = j;
				}
			}
    	}
    	coordinator = tmpcoord;
    	System.out.println("\nCoordinator is "+coordinator);

    }

    public static void bringUp(int proc_id)
    {
    	state[proc_id]=true;
    	elect(proc_id);
    }

    public static void bringDown(int proc_id)
    {
    	state[proc_id]=false;
    }

	public static void main(String[] args) 
    {
		int choice;
        Scanner sc = new Scanner(System.in);
        for (int i = 0; i < Bully.num_proc; ++i) 
        {
            Bully.state[i] = true;
        }
        // Bully.coordinator = 5;
        System.out.println("5 active process are:");
        System.out.println("Process up  = p1 p2 p3 p4 p5");
        System.out.println("Process 5 is coordinator");
        Bully.bringDown(5);
        Bully.bringDown(4);
        Bully.elect(2);
        Bully.bringUp(5);
        Bully.bringUp(4);
	}
}

RING:

import java.util.Scanner;

class Rr 
{

	public int index;   // to store the index of process
	public int id;      // to store id/name of process
	public int f; //flag 
	String state;       // indiactes whether active or inactive state of node

}


public class Ring 
{
	public static void main(String[] args) 
	{

		// TODO Auto-generated method stub

		int temp, i, j;
		
		Rr proc[] = new Rr[10];

// object initialisation
		for (i = 0; i < proc.length; i++)
			proc[i] = new Rr();

// scanner used for getting input from console
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the number of process : ");
		int num = in.nextInt();

// getting input from users
		for (i = 0; i < num; i++) 
		{
			proc[i].index = i;
			System.out.println("Enter the id of process : ");
			proc[i].id = in.nextInt();
			proc[i].state = "active";
			proc[i].f = 0;
		}


// sorting the processes from on the basis of id
		for (i = 0; i < num - 1; i++) 
		{
			for (j = 0; j < num - 1; j++) 
			{
				if (proc[j].id > proc[j + 1].id) 
				{
					temp = proc[j].id;
					proc[j].id = proc[j + 1].id;
					proc[j + 1].id = temp;
				}
			}
		}


		for (i = 0; i < num; i++) 
		{
			System.out.print("  [" + i + "]" + " " + proc[i].id);
		}




		int init;
		int ch;
		int temp1;
		int temp2;
		int ch1;
		int arr[] = new int[10];

		proc[num - 1].state = "inactive";

		System.out.println("\n process " + proc[num - 1].id + " is selected as co-ordinator");

		while (true) 
		{
			System.out.println("\n 1.election 2.quit ");
			ch = in.nextInt();

			for (i = 0; i < num; i++) 
			{
				proc[i].f = 0;
			}

			switch (ch) 
			{
				case 1:
				System.out.println("\n Enter the Process number who initialsied election : ");
				init = in.nextInt();
				temp2 = init;
				temp1 = init + 1;

				i = 0;

				while (temp2 != temp1) 
				{
					if ("active".equals(proc[temp1].state) && proc[temp1].f == 0) 
					{

						System.out.println("\nProcess " + proc[init].id + " send message to " + proc[temp1].id);
						proc[temp1].f = 1;
						init = temp1;
						arr[i] = proc[temp1].id;
						i++;
					}
					if (temp1 == num) 
					{
						temp1 = 0;
					} 
					else 
					{
						temp1++;
					}
				}

				System.out.println("\nProcess " + proc[init].id + " send message to " + proc[temp1].id);
				arr[i] = proc[temp1].id;
				i++;
				int max = -1;


// finding maximum for co-ordinator selection
				for (j = 0; j < i; j++) 
				{
					if (max < arr[j]) 
					{
						max = arr[j];
					}
				}

// co-ordinator is found then printing on console
				System.out.println("\n process " + max + " is selected as co-ordinator");


				for (i = 0; i < num; i++) 
				{

					if (proc[i].id == max) 
					{
						proc[i].state = "inactive";
					}
				}
				break;

				case 2:
            	System.out.println("Program terminated ...");
            	return ;

				default:
				System.out.println("\n invalid response \n");
				break;
			}


		}
	}

}

Assignment 5: 

SOAP: String Operations

package org.me.stringmanip;

import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.ejb.Stateless;


@WebService(serviceName = "Stringop")
@Stateless()
public class Stringop 
{


   
    @WebMethod(operationName = "concat")
    public String concat(@WebParam(name = "a") String a, @WebParam(name = "b") String b) 
    {
        //TODO write your implementation code here:
        String res = a.concat(b);
        return res;
    }

    
    @WebMethod(operationName = "length")
    public int length(@WebParam(name = "a") String a)
    {
        //TODO write your implementation code here:
        return a.length();
    }

    
    @WebMethod(operationName = "upper")
    public String upper(@WebParam(name = "a") String a) 
    {
        //TODO write your implementation code here:
        return a.toUpperCase();
    }

    
    @WebMethod(operationName = "lower")
    public String lower(@WebParam(name = "a") String a) 
    {
        //TODO write your implementation code here:
        return a.toLowerCase();
    }

    
    @WebMethod(operationName = "compare")
    public String compare(@WebParam(name = "a") String a, @WebParam(name = "b") String b) 
    {
        //TODO write your implementation code here:
        int comp = a.compareTo(b);
        String msg = "";
        if(comp==0)
        {
            msg = "Both are equal";
        }
        else if(comp<0)
        {
            msg = "Second string is lexicographically greater";
        }
        else
        {
            msg = "First string is lexicographically greater";
        }
        return msg;
    }
}

  
  




 



